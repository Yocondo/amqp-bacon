// Generated by CoffeeScript 1.8.0
var Bacon, Promise, amqp, amqpClient, logger, subscribe;

Promise = require('es6-promise').Promise;

amqp = require('amqp');

Bacon = require('baconjs').Bacon;

logger = require('winston');

subscribe = function(connection, queueName, queueOptions, subscriptionOptions) {
  return function(sink) {
    var unsubscribe;
    unsubscribe = function() {
      return logger.info('[AMQP] the queue [%s] has not been subscribed yet.', queueName);
    };
    connection.then(function(conn) {
      logger.info('[AMQP] subscribing to queue [%s]', queueName);
      return conn.queue(queueName, queueOptions, function(queue) {
        var subscription;
        subscription = queue.subscribe(subscriptionOptions, function(payload, headers, delivery, message) {
          var res;
          logger.debug('[AMQP] received message from queue [%s].', queue.name);
          res = sink(new Bacon.Next({
            payload: payload,
            headers: headers,
            delivery: delivery,
            message: message
          }));
          if (res === Bacon.noMore) {
            return unsubscribe();
          }
        });
        return subscription.addCallback(function(ok) {
          logger.debug('[AMQP] queue [%s] subscribed with consumer tag [%s], waiting for messages.', queue.name, ok.consumerTag);
          return unsubscribe = function() {
            logger.info('[AMQP] cancelling subscription [%s] to queue [%s]', ok.consumerTag, queue.name);
            return queue.unsubscribe(ok.consumerTag);
          };
        });
      });
    });
    return function() {
      return unsubscribe();
    };
  };
};

amqpClient = function(options) {
  var connection, streams;
  connection = new Promise(function(resolve, reject) {
    var conn;
    logger.info('[AMQP] connecting to %s@%s', options.login, options.host);
    conn = amqp.createConnection(options);
    conn.on('error', function(err) {
      logger.error('[AMQP] error connecting:', err.stack || err);
      return reject(err);
    });
    return conn.once('ready', (function(_this) {
      return function(err) {
        if (err != null) {
          return reject(err);
        }
        logger.info('[AMQP] connection established.');
        return resolve(conn);
      };
    })(this));
  });
  streams = [];
  return {
    connection: connection,
    subscribe: function(queueName, queueOptions, subscriptionOptions) {
      var stream;
      streams.push(stream = Bacon.fromBinder(subscribe(connection, queueName, queueOptions, subscriptionOptions)));
      return stream;
    },
    close: function(next) {
      return connection.then(function(conn) {
        logger.info('[AMQP] closing connection');
        conn.destroy();
        return typeof next === "function" ? next() : void 0;
      });
    }
  };
};

module.exports = amqpClient;
